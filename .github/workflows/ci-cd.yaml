name: ci-cd

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  build-and-push-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-to-k8s:
    name: Deploy to Kubernetes
    needs: build-and-push-docker
    runs-on: ubuntu-latest
    if: ${{ secrets.KUBECONFIG }}
    env:
      NAMESPACE: wisecow

    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Install kubectl
        uses: azure/setup-kubectl@v4

      - name: Set up kubeconfig
        id: kubeconfig
        run: |
          echo "Setting up kubeconfig..."
          if echo "${KUBECONFIG_DATA}" | grep -q "apiVersion"; then
            echo "${KUBECONFIG_DATA}" > $HOME/.kube/config
          else
            echo "${KUBECONFIG_DATA}" | base64 -d > $HOME/.kube/config
          fi
          mkdir -p $HOME/.kube
          chmod 600 $HOME/.kube/config
          echo "KUBECONFIG=$HOME/.kube/config" >> $GITHUB_ENV
          kubectl version --client
        env:
          KUBECONFIG_DATA: ${{ secrets.KUBECONFIG }}

      - name: Verify cluster connection
        run: |
          kubectl config current-context
          kubectl get nodes || echo "Unable to list nodes â€” check permissions."

      - name: Apply Kubernetes manifests
        run: |
          echo "Applying manifests in namespace: $NAMESPACE"
          kubectl apply --validate=false -f k8s/namespace.yaml || echo "Namespace may already exist."
          kubectl apply --validate=false -f k8s/service.yaml -n $NAMESPACE

          TEMP_DEPLOYMENT_FILE=$(mktemp)
          IMAGE_TAG="ghcr.io/${{ github.repository }}:${{ github.sha }}"
          sed "s|<IMAGE_PLACEHOLDER>|$IMAGE_TAG|g" k8s/deployment.yaml > $TEMP_DEPLOYMENT_FILE

          kubectl apply --validate=false -f $TEMP_DEPLOYMENT_FILE -n $NAMESPACE
          rm $TEMP_DEPLOYMENT_FILE

          echo "Deployment rollout triggered successfully."

